name: AI Code Review

on:
  pull_request:
    # Only run when code or docs likely to be reviewed have changed
    paths:
      - "**/*.py"
      - "**/*.md"
      - "**/*.html"
      - ".github/workflows/ai-code-review.yml"
  workflow_dispatch: # allow manual runs from the Actions tab

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  review:
    name: Review changes with OpenAI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Main review
      - name: AI Code Review
        uses: anc95/ChatGPT-CodeReview@v1.0.11
        env:
          # GitHub and OpenAI credentials
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_ENDPOINT: https://api.openai.com/v1

          # Model and prompt
          MODEL: gpt-4o-mini
          PROMPT: |
            **Perform a rigorous, critical review of the provided Python/Django code changes. Do not approve or endorse the code under any circumstances—even if it appears correct at first glance. Your role is to find flaws, not to reassure.**

            Specifically, analyze and report on:

            1. **Code Quality & Django Best Practices**  
              - Is the code idiomatic, readable, and maintainable?  
              - Does it misuse or ignore Django conventions (e.g., fat models, thin views, proper use of ORM, signals, or middleware)?  
              - Are there violations of DRY, SRP, or testability principles?

            2. **Bugs & Correctness Issues**  
              - Identify logical errors, unhandled edge cases, race conditions, or incorrect assumptions.  
              - Flag ORM anti-patterns (e.g., N+1 queries, excessive `.all()`, missing `.exists()` optimizations).

            3. **Security Vulnerabilities**  
              - Hunt for XSS, CSRF bypasses, IDOR, SQL injection risks, unsafe redirects, or improper permission checks.  
              - Verify that user input is validated/sanitized and that Django’s built-in protections (e.g., CSRF tokens, `@require_http_methods`, model-level constraints) are properly used.

            4. **Performance Concerns**  
              - Highlight inefficient database queries, redundant computations, or synchronous I/O in async contexts.  
              - Suggest specific optimizations (e.g., `select_related`, caching, pagination).

            5. **Actionable Improvements**  
              - Provide concrete, line-specific suggestions for refactoring or hardening the code.  
              - Recommend alternative Django patterns or standard library features where applicable.

            **Never say “LGTM,” “Looks good,” or imply approval. Even if no issues are found , always err on the side of skepticism. Reference line numbers when possible. Keep feedback concise and technically precise.**

          # OpenAI parameters
          top_p: "1"
          temperature: "0.7"
