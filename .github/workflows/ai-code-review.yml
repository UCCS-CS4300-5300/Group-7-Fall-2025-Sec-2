name: AI Code Review

on:
  pull_request:
    # Only run when code or docs likely to be reviewed have changed
    paths:
      - "**/*.py"
      - "**/*.md"
      - "**/*.html"
      - ".github/workflows/ai-code-review.yml"
  workflow_dispatch: # allow manual runs from the Actions tab

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  review:
    name: Review changes with OpenAI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Main review
      - name: AI Code Review
        uses: anc95/ChatGPT-CodeReview@v1.0.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_API_ENDPOINT: https://api.openai.com/v1

          MODEL: gpt-4o-mini
          PROMPT: |
            Act as an expert Python/Django code reviewer. Analyze the code changes and provide a focused, professional review.
            
            # Review Focus Areas
            
            ## 1. Django Best Practices
            - Proper ORM usage and queryset optimization
            - Correct use of models, views, serializers, and forms
            - Following Django conventions and design patterns
            
            ## 2. Security Issues
            - SQL injection, XSS, or CSRF vulnerabilities
            - Authentication and authorization flaws
            - Exposed secrets or sensitive data
            - Missing input validation
            
            ## 3. Performance Problems
            - N+1 query problems
            - Missing select_related() or prefetch_related()
            - Inefficient algorithms or data structures
            - Missing database indexes
            
            ## 4. Code Quality
            - Error handling and edge cases
            - Code readability and maintainability
            - Proper use of type hints
            - Unnecessary complexity or duplication
            
            ## 5. Potential Bugs
            - Logic errors or race conditions
            - Incorrect data handling
            - Missing null checks or validations
            
            # Response Rules
            
            - Use this format for issues: `[SEVERITY] Line X: [Issue] - [Brief explanation]`
            - Severity levels: CRITICAL (security/data loss), HIGH (bugs/performance), MEDIUM (code quality), LOW (suggestions)
            - Only report actual issues - if code is good, respond with "No significant issues found"
            - Include a brief code example for non-obvious fixes
            - Maximum 3 sentences per issue
            - Skip formatting/style issues unless they impact functionality
            
            # Example Response Format
            
            [CRITICAL] Line 45: Potential SQL injection - User input directly concatenated into raw query. Use parameterized queries instead.
            
            [HIGH] Line 23: N+1 query detected - Add .select_related('user') to avoid multiple database hits.
          # Newer models expect 'max_completion_tokens' rather than 'max_tokens'
          max_completion_tokens: "8000"
          top_p: "1"
          temperature: "0.7"
          review_comment_lgtm: "false"

